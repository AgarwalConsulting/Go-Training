// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.3
// source: api/fibonacci.proto

package api

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type FirstNQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	N int64 `protobuf:"varint,1,opt,name=n,proto3" json:"n,omitempty"`
}

func (x *FirstNQuery) Reset() {
	*x = FirstNQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_fibonacci_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirstNQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirstNQuery) ProtoMessage() {}

func (x *FirstNQuery) ProtoReflect() protoreflect.Message {
	mi := &file_api_fibonacci_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirstNQuery.ProtoReflect.Descriptor instead.
func (*FirstNQuery) Descriptor() ([]byte, []int) {
	return file_api_fibonacci_proto_rawDescGZIP(), []int{0}
}

func (x *FirstNQuery) GetN() int64 {
	if x != nil {
		return x.N
	}
	return 0
}

type FibonacciNumber struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *FibonacciNumber) Reset() {
	*x = FibonacciNumber{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_fibonacci_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FibonacciNumber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FibonacciNumber) ProtoMessage() {}

func (x *FibonacciNumber) ProtoReflect() protoreflect.Message {
	mi := &file_api_fibonacci_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FibonacciNumber.ProtoReflect.Descriptor instead.
func (*FibonacciNumber) Descriptor() ([]byte, []int) {
	return file_api_fibonacci_proto_rawDescGZIP(), []int{1}
}

func (x *FibonacciNumber) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type FirstNResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*FibonacciNumber `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *FirstNResponse) Reset() {
	*x = FirstNResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_fibonacci_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirstNResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirstNResponse) ProtoMessage() {}

func (x *FirstNResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_fibonacci_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirstNResponse.ProtoReflect.Descriptor instead.
func (*FirstNResponse) Descriptor() ([]byte, []int) {
	return file_api_fibonacci_proto_rawDescGZIP(), []int{2}
}

func (x *FirstNResponse) GetValues() []*FibonacciNumber {
	if x != nil {
		return x.Values
	}
	return nil
}

var File_api_fibonacci_proto protoreflect.FileDescriptor

var file_api_fibonacci_proto_rawDesc = []byte{
	0x0a, 0x13, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x62, 0x6f, 0x6e, 0x61, 0x63, 0x63, 0x69, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x61, 0x70, 0x69, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x1b, 0x0a, 0x0b, 0x46, 0x69, 0x72, 0x73, 0x74,
	0x4e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x01, 0x6e, 0x22, 0x27, 0x0a, 0x0f, 0x46, 0x69, 0x62, 0x6f, 0x6e, 0x61, 0x63, 0x63,
	0x69, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3e, 0x0a,
	0x0e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2c, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x69, 0x62, 0x6f, 0x6e, 0x61, 0x63, 0x63, 0x69, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x32, 0xb8, 0x01,
	0x0a, 0x09, 0x46, 0x69, 0x62, 0x6f, 0x6e, 0x61, 0x63, 0x63, 0x69, 0x12, 0x39, 0x0a, 0x07, 0x47,
	0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x14,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x69, 0x62, 0x6f, 0x6e, 0x61, 0x63, 0x63, 0x69, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x46, 0x69, 0x72,
	0x73, 0x74, 0x4e, 0x12, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x4e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x06,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x14,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x69, 0x62, 0x6f, 0x6e, 0x61, 0x63, 0x63, 0x69, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x22, 0x00, 0x30, 0x01, 0x42, 0x1b, 0x5a, 0x19, 0x61, 0x6c, 0x67, 0x6f,
	0x67, 0x72, 0x69, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x69, 0x62, 0x2d, 0x67, 0x72, 0x70,
	0x63, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_fibonacci_proto_rawDescOnce sync.Once
	file_api_fibonacci_proto_rawDescData = file_api_fibonacci_proto_rawDesc
)

func file_api_fibonacci_proto_rawDescGZIP() []byte {
	file_api_fibonacci_proto_rawDescOnce.Do(func() {
		file_api_fibonacci_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_fibonacci_proto_rawDescData)
	})
	return file_api_fibonacci_proto_rawDescData
}

var file_api_fibonacci_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_api_fibonacci_proto_goTypes = []interface{}{
	(*FirstNQuery)(nil),     // 0: api.FirstNQuery
	(*FibonacciNumber)(nil), // 1: api.FibonacciNumber
	(*FirstNResponse)(nil),  // 2: api.FirstNResponse
	(*empty.Empty)(nil),     // 3: google.protobuf.Empty
}
var file_api_fibonacci_proto_depIdxs = []int32{
	1, // 0: api.FirstNResponse.values:type_name -> api.FibonacciNumber
	3, // 1: api.Fibonacci.GetNext:input_type -> google.protobuf.Empty
	0, // 2: api.Fibonacci.GetFirstN:input_type -> api.FirstNQuery
	3, // 3: api.Fibonacci.Stream:input_type -> google.protobuf.Empty
	1, // 4: api.Fibonacci.GetNext:output_type -> api.FibonacciNumber
	2, // 5: api.Fibonacci.GetFirstN:output_type -> api.FirstNResponse
	1, // 6: api.Fibonacci.Stream:output_type -> api.FibonacciNumber
	4, // [4:7] is the sub-list for method output_type
	1, // [1:4] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_api_fibonacci_proto_init() }
func file_api_fibonacci_proto_init() {
	if File_api_fibonacci_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_fibonacci_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirstNQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_fibonacci_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FibonacciNumber); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_fibonacci_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirstNResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_fibonacci_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_fibonacci_proto_goTypes,
		DependencyIndexes: file_api_fibonacci_proto_depIdxs,
		MessageInfos:      file_api_fibonacci_proto_msgTypes,
	}.Build()
	File_api_fibonacci_proto = out.File
	file_api_fibonacci_proto_rawDesc = nil
	file_api_fibonacci_proto_goTypes = nil
	file_api_fibonacci_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FibonacciClient is the client API for Fibonacci service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FibonacciClient interface {
	GetNext(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*FibonacciNumber, error)
	GetFirstN(ctx context.Context, in *FirstNQuery, opts ...grpc.CallOption) (*FirstNResponse, error)
	Stream(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (Fibonacci_StreamClient, error)
}

type fibonacciClient struct {
	cc grpc.ClientConnInterface
}

func NewFibonacciClient(cc grpc.ClientConnInterface) FibonacciClient {
	return &fibonacciClient{cc}
}

func (c *fibonacciClient) GetNext(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*FibonacciNumber, error) {
	out := new(FibonacciNumber)
	err := c.cc.Invoke(ctx, "/api.Fibonacci/GetNext", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fibonacciClient) GetFirstN(ctx context.Context, in *FirstNQuery, opts ...grpc.CallOption) (*FirstNResponse, error) {
	out := new(FirstNResponse)
	err := c.cc.Invoke(ctx, "/api.Fibonacci/GetFirstN", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fibonacciClient) Stream(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (Fibonacci_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Fibonacci_serviceDesc.Streams[0], "/api.Fibonacci/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &fibonacciStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Fibonacci_StreamClient interface {
	Recv() (*FibonacciNumber, error)
	grpc.ClientStream
}

type fibonacciStreamClient struct {
	grpc.ClientStream
}

func (x *fibonacciStreamClient) Recv() (*FibonacciNumber, error) {
	m := new(FibonacciNumber)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FibonacciServer is the server API for Fibonacci service.
type FibonacciServer interface {
	GetNext(context.Context, *empty.Empty) (*FibonacciNumber, error)
	GetFirstN(context.Context, *FirstNQuery) (*FirstNResponse, error)
	Stream(*empty.Empty, Fibonacci_StreamServer) error
}

// UnimplementedFibonacciServer can be embedded to have forward compatible implementations.
type UnimplementedFibonacciServer struct {
}

func (*UnimplementedFibonacciServer) GetNext(context.Context, *empty.Empty) (*FibonacciNumber, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNext not implemented")
}
func (*UnimplementedFibonacciServer) GetFirstN(context.Context, *FirstNQuery) (*FirstNResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFirstN not implemented")
}
func (*UnimplementedFibonacciServer) Stream(*empty.Empty, Fibonacci_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}

func RegisterFibonacciServer(s *grpc.Server, srv FibonacciServer) {
	s.RegisterService(&_Fibonacci_serviceDesc, srv)
}

func _Fibonacci_GetNext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FibonacciServer).GetNext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Fibonacci/GetNext",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FibonacciServer).GetNext(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fibonacci_GetFirstN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FirstNQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FibonacciServer).GetFirstN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Fibonacci/GetFirstN",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FibonacciServer).GetFirstN(ctx, req.(*FirstNQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fibonacci_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FibonacciServer).Stream(m, &fibonacciStreamServer{stream})
}

type Fibonacci_StreamServer interface {
	Send(*FibonacciNumber) error
	grpc.ServerStream
}

type fibonacciStreamServer struct {
	grpc.ServerStream
}

func (x *fibonacciStreamServer) Send(m *FibonacciNumber) error {
	return x.ServerStream.SendMsg(m)
}

var _Fibonacci_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Fibonacci",
	HandlerType: (*FibonacciServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNext",
			Handler:    _Fibonacci_GetNext_Handler,
		},
		{
			MethodName: "GetFirstN",
			Handler:    _Fibonacci_GetFirstN_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _Fibonacci_Stream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/fibonacci.proto",
}
