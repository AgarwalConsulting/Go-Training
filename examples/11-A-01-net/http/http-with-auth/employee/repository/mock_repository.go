// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package repository is a generated GoMock package.
package repository

import (
	entities "algogrit.com/emp-server/employee/entities"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockEmployeeRepository is a mock of EmployeeRepository interface
type MockEmployeeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEmployeeRepositoryMockRecorder
}

// MockEmployeeRepositoryMockRecorder is the mock recorder for MockEmployeeRepository
type MockEmployeeRepositoryMockRecorder struct {
	mock *MockEmployeeRepository
}

// NewMockEmployeeRepository creates a new mock instance
func NewMockEmployeeRepository(ctrl *gomock.Controller) *MockEmployeeRepository {
	mock := &MockEmployeeRepository{ctrl: ctrl}
	mock.recorder = &MockEmployeeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEmployeeRepository) EXPECT() *MockEmployeeRepositoryMockRecorder {
	return m.recorder
}

// RetrieveAll mocks base method
func (m *MockEmployeeRepository) RetrieveAll() []entities.Employee {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveAll")
	ret0, _ := ret[0].([]entities.Employee)
	return ret0
}

// RetrieveAll indicates an expected call of RetrieveAll
func (mr *MockEmployeeRepositoryMockRecorder) RetrieveAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveAll", reflect.TypeOf((*MockEmployeeRepository)(nil).RetrieveAll))
}

// FindBy mocks base method
func (m *MockEmployeeRepository) FindBy(arg0 int) *entities.Employee {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBy", arg0)
	ret0, _ := ret[0].(*entities.Employee)
	return ret0
}

// FindBy indicates an expected call of FindBy
func (mr *MockEmployeeRepositoryMockRecorder) FindBy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBy", reflect.TypeOf((*MockEmployeeRepository)(nil).FindBy), arg0)
}

// Save mocks base method
func (m *MockEmployeeRepository) Save(arg0 entities.Employee) (*entities.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(*entities.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save
func (mr *MockEmployeeRepositoryMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockEmployeeRepository)(nil).Save), arg0)
}

// Update mocks base method
func (m *MockEmployeeRepository) Update(arg0 int, arg1 entities.Employee) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockEmployeeRepositoryMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockEmployeeRepository)(nil).Update), arg0, arg1)
}
