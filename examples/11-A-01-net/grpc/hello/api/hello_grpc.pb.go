// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: api/hello.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GreetingClient is the client API for Greeting service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreetingClient interface {
	Greet(ctx context.Context, in *Hello, opts ...grpc.CallOption) (*GreetResponse, error)
	Stream(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Greeting_StreamClient, error)
}

type greetingClient struct {
	cc grpc.ClientConnInterface
}

func NewGreetingClient(cc grpc.ClientConnInterface) GreetingClient {
	return &greetingClient{cc}
}

func (c *greetingClient) Greet(ctx context.Context, in *Hello, opts ...grpc.CallOption) (*GreetResponse, error) {
	out := new(GreetResponse)
	err := c.cc.Invoke(ctx, "/api.Greeting/Greet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greetingClient) Stream(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Greeting_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Greeting_ServiceDesc.Streams[0], "/api.Greeting/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &greetingStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Greeting_StreamClient interface {
	Recv() (*StreamResponse, error)
	grpc.ClientStream
}

type greetingStreamClient struct {
	grpc.ClientStream
}

func (x *greetingStreamClient) Recv() (*StreamResponse, error) {
	m := new(StreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GreetingServer is the server API for Greeting service.
// All implementations must embed UnimplementedGreetingServer
// for forward compatibility
type GreetingServer interface {
	Greet(context.Context, *Hello) (*GreetResponse, error)
	Stream(*emptypb.Empty, Greeting_StreamServer) error
	mustEmbedUnimplementedGreetingServer()
}

// UnimplementedGreetingServer must be embedded to have forward compatible implementations.
type UnimplementedGreetingServer struct {
}

func (UnimplementedGreetingServer) Greet(context.Context, *Hello) (*GreetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Greet not implemented")
}
func (UnimplementedGreetingServer) Stream(*emptypb.Empty, Greeting_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (UnimplementedGreetingServer) mustEmbedUnimplementedGreetingServer() {}

// UnsafeGreetingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreetingServer will
// result in compilation errors.
type UnsafeGreetingServer interface {
	mustEmbedUnimplementedGreetingServer()
}

func RegisterGreetingServer(s grpc.ServiceRegistrar, srv GreetingServer) {
	s.RegisterService(&Greeting_ServiceDesc, srv)
}

func _Greeting_Greet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hello)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreetingServer).Greet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Greeting/Greet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreetingServer).Greet(ctx, req.(*Hello))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeting_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreetingServer).Stream(m, &greetingStreamServer{stream})
}

type Greeting_StreamServer interface {
	Send(*StreamResponse) error
	grpc.ServerStream
}

type greetingStreamServer struct {
	grpc.ServerStream
}

func (x *greetingStreamServer) Send(m *StreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Greeting_ServiceDesc is the grpc.ServiceDesc for Greeting service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Greeting_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Greeting",
	HandlerType: (*GreetingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Greet",
			Handler:    _Greeting_Greet_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _Greeting_Stream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/hello.proto",
}
