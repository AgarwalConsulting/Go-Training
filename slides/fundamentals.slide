# Go

Gaurav Agarwal
gaurav@codermana.com

## Running & Building

Go is a compiled language. Every program needs to be compiled before it can be run!

- `go build` - for compiling go program into a binary
- `go run` - for compiling and running the binary immediately

## Env variables

- `GOOS`
- `GOARCH`
---
- [Possible values](https://gist.github.com/asukakenji/f15ba7e588ac42795f421b48b8aede63)

## Naming conventions

- package names, directories, filenames => snake_case
- exported functions, variables, const, types => PascalCase / UpperCamelCase
- non-exported functions, variables, const, types => lowerCamelCase

## Import & Exports

## Packages

- Every `.go` file starts with `package <name>`
- All `.go` files in a directory need to belong to the same package
- Every package needs to be in a directory of the same name
  - Except `main` package
- `func main` can only be defined in a `main` package

## Exports

- Works using the first character -> uppercase means exported

## Imports

Import path is always relative to `$GOPATH/src`

---

	go help importpath

## Types

Go is a statically typed, type inferred language!

---

i.e.) You don't have to write a type of a variable explicitly, the compile will infer it. But all types must be known/inferred at compile time.

### Variables

- `var` keyword

#### Declaration & Initialization

- `var <name> <type>`
- `var <name> = <val>`
- `<name> := <val>`

## `builtin` types

```go
bool

string

int  int8  int16  int32  int64
uint uint8 uint16 uint32 uint64 uintptr

byte // alias for uint8

rune // alias for int32
     // represents a Unicode code point

float32 float64

complex64 complex128
```

- Know type information using `%T` [formatter](https://golang.org/pkg/fmt/)
- Type aliases using `type` keyword

## Default values

- zero values
- [Basic types](https://tour.golang.org/basics/11)
  - defined in the [`builtin`](https://golang.org/pkg/builtin/) package
- multiple assignment
  - `var i, j = "Hello", 42`

## Type conversion

- `<type>(<val-of-other-type>)`
  - Eg: `val := int(42.00)`
- Specialized type conversion `strconv`
